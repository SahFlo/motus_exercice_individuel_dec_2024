//!!!!! TODO !!!!!
//conseil de JÃ©rÃ©my : une fonction par tÃ¢che : une pour le gagner, une pour lettres mal placÃ©es une pour lettres bien placÃ©es, etc.
//Et une fonction pour afficher, pas de mÃ©lange d'affichage et de return dans une fonction
//Refaire un tour sur les variables c'est le bordel
//Eviter de dÃ©clarer des variables gloables
//Il faut que je gÃ©nÃ¨re un mot avant de lancer une proposition donc avant le clic sur submit !

let wordToGuess = ["jaune", "vert", "bleu", "orange", "rouge", "violet", "blanc", "noir"]
let wordToGuessArray = handleWordToGuessArray()

let proposition = document.getElementById("proposition").value //rÃ©cupÃ¨re l'input
let propositionArray = proposition.split("") //dÃ©coupe la proposition


const wellPlaced = document.getElementById("well-placed") 
const missPlaced = document.getElementById ("miss-placed")
const notInWord = document.getElementById("not-in-word")
const endOfGame =  document.getElementById("end-of-game")
const submit = document.getElementById("submit")
const replay = document.getElementById("rejouer")

//Pour choisir dans la liste un mot Ã  deviner et le dÃ©couper en un tableau
function handleWordToGuessArray(){
  let randomIndex = Math.floor(Math.random() * wordToGuess.length) 
  //gÃ©nÃ¨re un chiffre entre 0 et 1 (math.random, le multiplie par la longueur du tableau et le ramÃ¨ne Ã  son entier infÃ©rieur)
  let randomWord = wordToGuess[randomIndex]
  console.log(randomWord)
  return randomWord.split("")
}

//Une fonction pour gÃ©rer les diffÃ©rents Ã©tats de jeu, gagnÃ©, lettres bien placÃ©es, lettres mal placÃ©es
submit.addEventListener("click",() =>{
    if (wordToGuessArray === propositionArray) {
      endOfGame.style.display = "ðŸŽ‰ Vous avez gagnÃ© ! ðŸŽ‰";
      return true;
        //pas sÃ»re de moi, return ? display ? Autre ? A MODIFIER OU VERIFIER

    } else {
      let wellPlacedArray = [];
      let missPlacedArray = [];
      let notInWordArray = [];
  
      // VÃ©rifier les lettres bien placÃ©es
      for (let i = 0; i < propositionArray.length; i++) {
        if (wordToGuessArray[i] === propropositionArray[i]) {
          wellPlacedArray.push(propositionArray[i]);
        }
      }
  
      // VÃ©rifier les lettres mal placÃ©es
      for (let i = 0; i < propositionArray.length; i++) {
        if (wordToGuessArray.includes(propositionArray[i]) && wordToGuessArray[i] !== propositionArray[i]) {
          missPlacedArray.push(propositionArray[i]);
        }
      }
  
      // VÃ©rifier les lettres absentes
      for (const letter of propositionArray) {
        if (!wordToGuessArray.includes(letter)) {
          notInWordArray.push(letter);
        }
      }
  
      // Mettre Ã  jour l'interface
      wellPlaced.innerText = "Bien placÃ©: " + wellPlacedArray.join(", ");
      missPlaced.innerText = "Mal placÃ©: " + missPlacedArray.join(", ");
      notInWord.innerText = "Pas dans le mot: " + notInWordArray.join(", ");
    }
  }
)  

replay.addEventListener("click", () =>{
  //vide l'Ã©cran 
  wellPlaced.innerText = "";
  missPlaced.innerText = "";
  notInWord.innerText = "";
  endOfGame.innerText = "";
  proposition.innerText = "";
  propositionArrayArray = [];
  //nouveau mot Ã  faire deviner
    
  // relance la comparaison et le display
}
)
